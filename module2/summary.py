# 2.1.14 ПІДСУМКИ РОЗДІЛУ
# 1. Функція print() є вбудованою функцією. Вона друкує/виводить на екран/консоль вказане повідомлення.

# 2. Вбудовані функції, на відміну від функцій, що визначаються користувачем, завжди доступні і не потребують імпорту. Python 3.8 має 69 вбудованих функцій. Ви можете знайти їхній повний перелік в алфавітному порядку в Python Standard Library (стандартній бібліотеці Python).

# 3. Щоб викликати функцію (цей процес називається зверненням до функції або викликом функції), потрібно ввести назву функції, після якої йдуть дужки. У функцію можна передавати аргументи, помістивши їх в круглі дужки. Аргументи необхідно відокремлювати комою, наприклад, «Порожня» функція print() виводить на екран порожній рядок.

# 4. Рядки в Python розділяються лапками, наприклад, "Я - рядок" (подвійні лапки), або 'Я теж рядок' (одинарні лапки).

# 5. Комп'ютерні програми - це набори інструкцій. Інструкція - це команда, при виконанні якої виконується певне завдання, наприклад, вивести на екран повідомлення.

# 6. У рядках Python зворотний слеш (\) це спеціальний символ, який повідомляє, що наступний символ має інше значення, наприклад, \n (символ нового рядка) починає новий рядок виведення.

# 7. Позиційні аргументи - це аргументи, значення яких визначається їх позицією, наприклад, другий аргумент виводиться після першого, третій - після другого і т.д.

# 8. Аргументи ключових слів - це ті, значення яких визначається не їх місцем розташування, а спеціальним словом (ключовим словом), яке використовується для їх ідентифікації.

# 9. Параметри end та sep можуть використовуватись для форматування виводу функції print(). Параметр sep задає роздільник між аргументами, що виводяться, наприклад, print("H", "E", "L", "L", "O", sep="-"), тоді як параметр end вказує, що виводити після виконання команди print.




# 1. Літерали ‒ це позначення для представлення в коді деяких фіксованих значень. У мові Python існують різні типи літералів ‒ наприклад, літерал може бути числом (числові літерали, наприклад, 123), або рядком (строкові літерали, наприклад, «I am a literal.»)

# 2. Двійкова система числення ‒ це система числення, в якій в якості основи використовується 2 цифри. Таким чином, двійкове число складається лише з 0 та 1, наприклад, 1010 ‒ це 10 у десятковій системі числення.

# Вісімкова та шістнадцяткова системи числення, аналогічно, використовують 8 та 16 в якості основи відповідно. У шістнадцятковій системі використовуються десяткові цифри та шість додаткових літер.
# 3. Цілі числа є одними з числових типів, що підтримуються Python. Це числа, записані без дробової частини, наприклад, 256 або -1 (від'ємні цілі числа).

# 4. Числа з рухомою крапкою ‒ це ще один з числових типів, що підтримуються Python. Це числа, які містять (або можуть містити) дробову складову, наприклад 1.27.

# 5. Щоб закодувати апостроф або лапки всередині рядка, ви можете або скористатися символом екранування, наприклад, 'I\'m happy.', або відкрити і закрити рядок, використовуючи набір символів, протилежний тим, які ви хочете закодувати, наприклад: "I'm happy." для кодування апострофа; і 'He said "Python", not "typhoon"' для кодування (подвійних) лапок.

# 6. Булеві значення — це два константні об'єкти: True і False, які використовуються для представлення значень істинності (в числовому контексті 1 — це True, а 0 — це False).


# Додатково

# Існує ще один спеціальний літерал, який використовується в Python: літерал None. Цей літерал є об’єктом типу NoneType і використовується для позначення відсутності значення. 




# Ключові моменти
# 1. Вираз ‒ це комбінація значень (або змінних, операторів, викликів функцій ‒ про них ви дізнаєтесь незабаром), яка дає результат у вигляді певного значення, наприклад, 1 + 2.

# 2. Оператори ‒ це спеціальні символи або ключові слова, які можуть оперувати значеннями та виконувати (математичні) операції, наприклад, оператор * перемножує два значення: x * y.

# 3. Арифметичні оператори в мові Python: + (додавання), - (віднімання), * (множення), / (класичне ділення ‒ завжди повертає число з рухомою крапкою), % (ділення за модулем ‒ ділить лівий операнд на правий і повертає залишок від операції, наприклад 5 % 2 = 1), ** (піднесення до степеня ‒ лівий операнд підноситься до степеня правого операнду, наприклад 2 ** 3 = 2 * 2 * 2 = 8), // (неповна частка від ділення ‒ повертає число, отримане в результаті ділення, але округлене до найближчого цілого, наприклад 3 // 2.0 = 1.0)

# 4. Унарний оператор ‒ це оператор з одним операндом, наприклад, -1 або +3.

# 5. Бінарний оператор — це оператор із двома операндами, наприклад 4 + 5 або 12 % 5.

# 6. Деякі оператори діють раніше за інших — ієрархія пріоритетів:

# оператор ** (піднесення до степеня) має найвищий пріоритет;
# потім унарні + і - (примітка: унарний оператор праворуч від оператора піднесення до степеня має більшу вагу, наприклад 4 ** -1 дорівнює 0.25)
# потім: *, / і %,
# і нарешті, найнижчий пріоритет: бінарні + і -.
# 7. Підвирази в дужках завжди обчислюються першими, наприклад 15 - 1 * (5 * (1 + 2)) = 0.

# 8. Оператор піднесення до степеня використовує праву асоціативність, наприклад 2 ** 2 ** 3 = 256.

# Корисні посилання:
# https://peps.python.org/pep-0008/
# https://docs.python.org/3/library/functions.html